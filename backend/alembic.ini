# A generic, single database configuration.

[alembic]
# path to migration scripts
# Use forward slashes (/) also on windows to provide an os agnostic path
script_location = migrations

# template used to generate migration file names; The default value is %%(rev)s_%%(slug)s
# Uncomment the line below if you want the files to be prepended with date and time
# see https://alembic.sqlalchemy.org/en/latest/tutorial.html#editing-the-ini-file
# for all available tokens
# file_template = %%(year)d_%%(month).2d_%%(day).2d_%%(hour).2d%%(minute).2d-%%(rev)s_%%(slug)s

# sys.path path, will be prepended to sys.path if present.
# defaults to the current working directory.
prepend_sys_path = .

# timezone to use when rendering the date within the migration file
# as well as the filename.
# If specified, requires the python>=3.9 or backports.zoneinfo library.
# Any required deps can installed by adding `alembic[tz]` to the pip requirements
# string value is passed to ZoneInfo()
# leave blank for localtime
# timezone =

# max length of characters to apply to the "slug" field
# truncate_slug_length = 40

# set to 'true' to run the environment during
# the 'revision' command, regardless of autogenerate
# revision_environment = false

# set to 'true' to allow .pyc and .pyo files without
# a source .py file to be detected as revisions in the
# versions/ directory
# sourceless = false

# version location specification; This defaults
# to migrations/versions.  When using multiple version
# directories, initial revisions must be specified with --version-path.
# The path separator used here should be the separator specified by "version_path_separator" below.
# version_locations = %(here)s/bar:%(here)s/bat:migrations/versions

# version path separator; As mentioned above, this is the character used to split
# version_locations. The default within new alembic.ini files is "os", which uses os.pathsep.
# If this key is omitted entirely, it falls back to the legacy behavior of splitting on spaces and/or commas.
# Valid values for version_path_separator are:
#
# version_path_separator = :
# version_path_separator = ;
# version_path_separator = space
version_path_separator = os  # Use os.pathsep. Default configuration used for new projects.

# set to 'true' to search source files recursively
# in each "version_locations" directory
# new in Alembic version 1.10
# recursive_version_locations = false

# the output encoding used when revision files
# are written from script.py.mako
# output_encoding = utf-8

# the output buffer referring to the environment variable PYTHONIOENCODING
# PythonIOEncoding = utf-8

# A URL to the database. The URL is passed directly to SQLAlchemy's
# create_engine() function. This is the only required value in the
# configuration file. The URL may contain % characters, which would
# require that they be escaped, e.g. %%. Alternatively, the % sign
# may be specified using the interpolation syntax %(perc)s.
# If the database URL contains characters such as @, :, % or +, make sure they
# are urlencoded. See RFC 3986 ยง 2 characters.
# The variable may contain variable substitutions, e.g. sqlalchemy.url = driver://user:%%(password)s@host/dbname
# This requires the variable name password to be defined using the %(here)s variable and expansion flag:
# For Python 3, requires Python 3.2 and above.
# expansion = ${here}/conf/development.ini
# The structure of the URL is database specific.
# Examples:
# Postgresql:   postgresql://user:pass@host/dbname
# Mysql:        mysql+mysqldb://user:pass@host/dbname
# Oracle:       oracle://user:pass@host/dbname
# Sqlite:       sqlite:///path/to/database.db
# Note that when using Sqlite, the path is relative to the location
# of the alembic.ini file, unless it is specified as an absolute path e.g.
# /path/to/database.db. Note: that the url should be urlencoded if needed,
# For example an url with a '+' character in the username or password needs
# to be encoded like this: 'postgresql://user%2Bname:pass@host/dbname'
sqlalchemy.url = %(DATABASE_URL)s

# Defines available custom commands. Example:
# [mycommand]
# command_package = myapp.commands

[post_write_hooks]
# post_write_hooks defines scripts or Python functions that are run
# on newly generated revision scripts.  See the documentation for further
# detail and examples

# format using "black" - use the console_scripts runner, against the "black" entrypoint
# hooks = black
# black.type = console_scripts
# black.entrypoint = black
# black.options = -l 79 REVISION_SCRIPT_FILENAME

# lint with attempts to fix using "ruff" - use the exec runner, execute a binary
# hooks = ruff
# ruff.type = exec
# ruff.executable = %(here)s/.venv/bin/ruff
# ruff.options = --fix REVISION_SCRIPT_FILENAME

# Logging configuration
[loggers]
keys = root,sqlalchemy,alembic

[handlers]
keys = console

[formatters]
keys = generic

[logger_root]
level = WARN
handlers = console
qualname =

[logger_sqlalchemy]
level = WARN
handlers =
qualname = sqlalchemy.engine

[logger_alembic]
level = INFO
handlers =
qualname = alembic

[handler_console]
class = StreamHandler
args = (sys.stderr,)
level = NOTSET
formatter = generic

[formatter_generic]
format = %(levelname)-5.5s [%(name)s] %(message)s
datefmt = %H:%M:%S
